[package]
name = "neural-doc-flow-api"
version.workspace = true
edition.workspace = true
authors.workspace = true
description = "REST API server for neural document processing"
license.workspace = true
repository.workspace = true
keywords = ["api", "rest", "document", "neural", "processing"]
categories = ["web-programming", "text-processing"]

[[bin]]
name = "neural-doc-api-server"
path = "src/bin/server.rs"

[dependencies]
# Workspace dependencies (feature-gated for build optimization)
neural-doc-flow-core = { path = "../neural-doc-flow-core" }
neural-doc-flow-processors = { path = "../neural-doc-flow-processors" }
neural-doc-flow-sources = { path = "../neural-doc-flow-sources" }
neural-doc-flow-outputs = { path = "../neural-doc-flow-outputs" }
neural-doc-flow-security = { path = "../neural-doc-flow-security", optional = true }
neural-doc-flow-coordination = { path = "../neural-doc-flow-coordination" }

# Web server framework
axum.workspace = true
tower.workspace = true
tower-http = { workspace = true, features = ["cors", "trace", "timeout", "fs"] }
hyper.workspace = true
http.workspace = true

# Async runtime
tokio = { workspace = true, features = ["full"] }
tokio-util.workspace = true

# Serialization and validation
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
validator = { workspace = true, features = ["derive"] }

# API documentation (feature-gated)
utoipa = { workspace = true, optional = true }
utoipa-swagger-ui = { workspace = true, optional = true }

# Authentication and security (feature-gated)
jsonwebtoken = { workspace = true, optional = true }
argon2 = { workspace = true, optional = true }
base64 = { workspace = true, optional = true }

# File handling
multipart.workspace = true

# Database (feature-gated for job tracking and user management)
sqlx = { version = "0.7", features = ["runtime-tokio-rustls", "sqlite", "chrono", "uuid"], optional = true }

# Core utilities
uuid = { workspace = true, features = ["v4", "serde"] }
chrono = { workspace = true, features = ["serde"] }
anyhow.workspace = true
thiserror.workspace = true

# Logging and tracing (feature-gated)
tracing.workspace = true
tracing-subscriber = { workspace = true, features = ["env-filter", "json"], optional = true }

# Configuration
config = "0.14"
clap = { version = "4.0", features = ["derive", "env"] }

# Rate limiting (feature-gated)
governor = { version = "0.6", optional = true }

# Metrics (feature-gated)
metrics.workspace = true
prometheus = { version = "0.13", optional = true }

# Background job processing (feature-gated)
tokio-cron-scheduler = { version = "0.9", optional = true }

# Additional utilities
futures.workspace = true
bytes = "1.5"
mime = "0.3"
mime_guess = "2.0"

[dev-dependencies]
tempfile.workspace = true
test-log.workspace = true
reqwest = { version = "0.11", features = ["json", "multipart"] }
tokio-test = "0.4"

[features]
default = ["minimal"]

# Core features
minimal = []
full = ["minimal", "database", "auth", "security", "metrics", "docs", "background-jobs"]

# Feature gates for build optimization
database = ["sqlx"]
auth = ["jsonwebtoken", "argon2", "base64"]
security = ["neural-doc-flow-security"]
metrics = ["prometheus"]
docs = ["utoipa", "utoipa-swagger-ui"]
background-jobs = ["tokio-cron-scheduler"]
rate-limiting = ["governor"]
compression = ["tower-http/compression-gzip"]
tracing = ["tracing-subscriber/env-filter", "tracing-subscriber/json"]

# Development features
dev-full = ["full"]
test-utils = []