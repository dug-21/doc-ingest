name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Core test suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by testing nightly only on Ubuntu
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Build all targets
      run: cargo build --all-targets --all-features
      
    - name: Run unit tests
      run: cargo test --all-features --lib
      
    - name: Run integration tests
      run: cargo test --all-features --test '*'
      
    - name: Run doc tests
      run: cargo test --all-features --doc

  # Coverage analysis
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Generate coverage report
      run: |
        cargo tarpaulin \
          --all-features \
          --workspace \
          --timeout 120 \
          --out Xml \
          --output-dir ./coverage/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        fail_ci_if_error: true
        
    - name: Coverage enforcement
      run: |
        COVERAGE=$(cargo tarpaulin --all-features --workspace --timeout 120 | grep -oP '\d+\.\d+(?=% coverage)')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 85.0" | bc -l) )); then
          echo "Coverage $COVERAGE% is below minimum 85%"
          exit 1
        fi

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install criterion
      run: cargo install cargo-criterion
      
    - name: Run benchmarks
      run: cargo bench --all-features
      
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/reports/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        
    - name: Performance regression check
      run: |
        # Check if benchmarks show > 10% regression
        cargo bench --all-features 2>&1 | tee bench_output.txt
        if grep -q "change:.*-[1-9][0-9]\+\%" bench_output.txt; then
          echo "Performance regression detected!"
          exit 1
        fi

  # Property-based testing
  property_tests:
    name: Property-Based Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Run property tests
      run: |
        # Run proptest with extended test cases
        PROPTEST_CASES=10000 cargo test --all-features proptest
        
    - name: Fuzz testing (if available)
      run: |
        if [ -d "fuzz" ]; then
          cargo install cargo-fuzz
          cargo fuzz build
          timeout 300 cargo fuzz run fuzz_target_1 || true
        fi

  # Integration testing with real documents
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Download test documents
      run: |
        mkdir -p test-data/documents
        # Download sample PDFs, DOCX, etc. for integration testing
        curl -o test-data/documents/sample.pdf "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
        
    - name: Run integration tests
      run: |
        export TEST_DATA_PATH="$(pwd)/test-data"
        cargo test --all-features integration_tests
        
    - name: Test CLI interface
      run: |
        cargo build --bin neuraldocflow-cli
        ./target/debug/neuraldocflow-cli --help
        ./target/debug/neuraldocflow-cli extract test-data/documents/sample.pdf
        
    - name: Test Python bindings
      if: matrix.os == 'ubuntu-latest'
      run: |
        pip install maturin
        maturin develop --features python
        python -c "import neuraldocflow; print('Python bindings OK')"

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit
      
    - name: Check for unsafe code
      run: |
        # Ensure unsafe blocks are minimal and documented
        UNSAFE_COUNT=$(grep -r "unsafe" src/ | wc -l)
        echo "Unsafe blocks found: $UNSAFE_COUNT"
        if [ $UNSAFE_COUNT -gt 10 ]; then
          echo "Too many unsafe blocks ($UNSAFE_COUNT > 10)"
          exit 1
        fi

  # Memory safety and leak detection
  memory_safety:
    name: Memory Safety
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust nightly with miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri
        
    - name: Run miri tests
      run: |
        cargo +nightly miri test --lib
        
    - name: Install valgrind (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install -y valgrind
      
    - name: Run valgrind memory check
      if: runner.os == 'Linux'
      run: |
        cargo build --features dev
        valgrind --tool=memcheck --leak-check=full --error-exitcode=1 \
          ./target/debug/neuraldocflow-cli extract test-data/documents/sample.pdf

  # Performance and stress testing
  stress_tests:
    name: Stress Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Generate large test documents
      run: |
        mkdir -p stress-test-data
        # Generate large documents for stress testing
        python3 scripts/generate_test_docs.py --count 100 --size large
        
    - name: Run stress tests
      run: |
        cargo test --release --all-features stress_tests -- --ignored
        
    - name: Memory usage monitoring
      run: |
        cargo build --release
        # Monitor memory usage during bulk processing
        /usr/bin/time -v ./target/release/neuraldocflow-cli batch-extract stress-test-data/

  # Compatibility testing
  compatibility:
    name: Compatibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test minimum supported Rust version (MSRV)
      run: |
        # Test with Rust 1.70 (our MSRV)
        rustup install 1.70
        cargo +1.70 check --all-features
        
    - name: Test different feature combinations
      run: |
        # Test with minimal features
        cargo test --no-default-features
        # Test individual features
        cargo test --features neural
        cargo test --features python
        cargo test --features wasm

  # Documentation tests
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      
    - name: Check documentation
      run: |
        cargo doc --all-features --no-deps
        
    - name: Test documentation examples
      run: |
        cargo test --doc --all-features
        
    - name: Check for broken links
      run: |
        cargo install cargo-deadlinks
        cargo doc --all-features
        cargo deadlinks --check-http

  # Results aggregation
  test_results:
    name: Test Results
    runs-on: ubuntu-latest
    needs: [test, coverage, benchmarks, property_tests, integration, security, memory_safety]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" = "failure" ] || 
           [ "${{ needs.coverage.result }}" = "failure" ] ||
           [ "${{ needs.security.result }}" = "failure" ] ||
           [ "${{ needs.memory_safety.result }}" = "failure" ]; then
          echo "Critical tests failed!"
          exit 1
        fi
        
        if [ "${{ needs.benchmarks.result }}" = "failure" ] ||
           [ "${{ needs.property_tests.result }}" = "failure" ] ||
           [ "${{ needs.integration.result }}" = "failure" ]; then
          echo "Some tests failed, but not critical"
          exit 0
        fi
        
        echo "All tests passed successfully!"